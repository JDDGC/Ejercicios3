package hello;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.json.simple.JSONObject;

import hello.User;
import hello.UserRepository;
import java.util.Optional;
import org.springframework.web.bind.annotation.RequestBody;

@Controller    // This means that this class is a Controller
//@RequestMapping(path="/index") // This means URL's start with /demo (after Application path)
public class MainController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private UserRepository userRepository;
    
    @GetMapping(path="/add") // Map ONLY GET Requests
    //public @ResponseBody String addNewUser (@RequestBody JSONObject inputJsonObj) {
    public @ResponseBody String addNewUser (@RequestParam String username, @RequestParam String name, @RequestParam String lastname
            , @RequestParam String email, @RequestParam String telephone) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request
        System.out.println("llegueeeeeeeeeee");
        User n = new User();
        n.setUsername(username);
        n.setName(name);
        n.setLastname(lastname);
        n.setEmail(email);
        n.setTelephone(telephone);
        userRepository.save(n);
        return "Saved";
    }
    
    @GetMapping(path="/update") // Map ONLY GET Requests
    public @ResponseBody String updateUser (@RequestParam int id_user,@RequestParam String username, @RequestParam String name, @RequestParam String lastname
            , @RequestParam String email, @RequestParam String telephone) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request
        System.out.println("llegueeeeeeeeeee a update");
        User n = new User();
        n.setId_user(id_user);
        n.setUsername(username);
        n.setName(name);
        n.setLastname(lastname);
        n.setEmail(email);
        n.setTelephone(telephone);
        userRepository.save(n);
        return "modificado";
    }
    
    
    @GetMapping(path="/all")
    public @ResponseBody Iterable<User> getAllUsers() {
        // This returns a JSON or XML with the users
        return userRepository.findAll();
    }
    @GetMapping(path="/find")
	public @ResponseBody User findUser (@RequestParam int id) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request
                Optional<User> usern = userRepository.findById(id);
                User user=usern.get();
		
                //userRepository.deleteById(id);
		return user;
    }
        
    @GetMapping(path="/delete")
	public @ResponseBody String deleteUser (@RequestParam int id_user) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request	
                userRepository.deleteById(id_user);
		return "eliminado";
    }
    @GetMapping(path="/index")
    public String index(){
        return "index";
    }
}